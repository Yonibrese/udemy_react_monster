{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-bar/search-bar.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBar","placeholder","handleChange","type","onChange","App","evt","setState","searchFeild","target","value","state","fetch","then","response","json","users","this","filterdMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAGaA,G,MAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCDbC,G,MAAW,SAACR,GACrB,OACI,qBAAKC,UAAY,YAAjB,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCNlBM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBAAOZ,UAAY,SACnBa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCqCCG,G,wDArCb,aAAc,IAAD,8BACX,gBAcJH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAIG,OAAOC,SAdrC,EAAKC,MAAM,CACTb,SAAU,GACVU,YAAa,IAJJ,E,gEASO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAACC,GAAD,OAAYA,EAASC,UAC1BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,S,+BAOpC,IAAD,EAC4BC,KAAKN,MAA/Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YACZU,EAAkBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC7CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAgBe,KAAKf,eAEvB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAhCVI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.47165e0b.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css'\n\nexport const Card = (props) => (\n    <div className=\"card-container\">\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n)","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-lists.styles.css';\n\nexport const CardList = (props) => {\n    return(\n        <div className = 'card-list'>\n            {props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster}/>    \n            ))}\n        </div>\n    );\n}","import React from 'react';\n\nimport './search-bar.styles.css';\n\nexport const SearchBar = ({placeholder, handleChange}) => (\n    <input className = 'search'\n    type='search' \n    placeholder={placeholder}\n    onChange={handleChange}/>\n);","import React, { Component } from 'react'\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBar } from './components/search-bar/search-bar.component';\n\nimport './App.css';\n\n// class component\nclass App extends Component{\n  constructor(){\n    super();\n    this.state={\n      monsters :[],\n      searchFeild: \"\"\n      \n    };\n  }\n  // calling to get Json information\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then((response)=>response.json())\n    .then((users) => this.setState({ monsters: users }));\n  }\n//search from chang event\nhandleChange = (evt) => {\n  this.setState({searchFeild: evt.target.value});\n}\n\n  render(){\n    const { monsters, searchFeild } = this.state;\n    const filterdMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchFeild.toLowerCase())\n      );\n    return(\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBar\n          placeholder='search monsters'\n          handleChange = {this.handleChange} \n        />\n        <CardList monsters={filterdMonsters} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}